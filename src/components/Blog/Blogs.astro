---
import { Markdown } from 'astro/components';
import LangLink from '../../components/LangLink.astro';
import HomeLink from '../../components/HomeLink.astro';
import Clock from '../../components/icons/Clock.astro';
import RSS from '../../components/icons/RSS.astro';
import Calendar from '../../components/icons/Calendar.astro';
import readingTime from 'reading-time';

function getTtr(source) {
  return Math.round(readingTime(source).minutes)
}

const { lang = 'en', posts = [], title = 'Blog', tag, showRss } = Astro.props;

const rssLink = lang === 'en' ? '/blog/rss.xml' : '/es/blog/rss.xml';
const available = lang === 'en'
      ? 'Also available on [dev.to](https://dev.to/pabloabc) and [hashnode](https://hn.berganza.dev)'
      : 'También disponible en [dev.to](https://dev.to/pabloabc) y [hashnode](https://hn.berganza.dev) (Sólo en inglés)';
---

<HomeLink lang={lang} />
<LangLink lang={lang} section={tag ? `blog/tags/${tag}` : 'blog'} />
<section class="blog">
  <div class="title">
    <h1>{title}</h1>
    {showRss && (
    <a class="rss-link" href={rssLink}>
      <span class="sr-only">
        {lang === 'en' ? 'RSS feed' : 'Contenido en RSS'}
      </span>
      <RSS lang={lang} />
    </a>
    )}
  </div>
  <Markdown class="available" content={available} />
  <ul>
    {posts.map(post => (
    <li>
      <a href={post.url}>
        <article>
          <h2>{post.title}</h2>
          <div class="stats">
            <div class="ttr">
              <span>
                <Clock lang={lang} />
              </span>
              <span>{getTtr(post.astro.source)}</span>
              <span>{lang === 'en' ? 'minutes' : 'minutos'}</span>
            </div>
            <div class="created">
              <span>
                <Calendar lang={lang} />
              </span>
              <span>
                {post.created}
              </span>
            </div>
          </div>
          <p>{post.description}</p>
        </article>
      </a>
    </li>
    ))}
  </ul>
</section>

<style lang="scss">
  .title {
    margin-top: 3rem;
    font-size: var(--h1);
    color: var(--color-heading);
    font-weight: 700;

    h1 {
      display: inline-block;
    }
  }

  a {
    text-decoration: none;
    display: block;
    border-radius: 10px;
  }

  .available a {
    display: inline;
    text-decoration: undefline;
    border-radius: 0px;
  }

  h2 {
    margin-top: 0;
    color: var(--color-heading);
    font-size: 1.5rem;
  }

  .blog {
    width: 90%;
    max-width: 50rem;
    margin: 0 auto;
    margin-bottom: 4rem;
  }

  .stats {
    display: flex;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    > * + * {
      margin-left: 2rem;
    }
  }

  .ttr, .created {
    color: var(--color-stats);
    span {
      margin-right: 0.2rem;
    }
  }

  p {
    color: var(--base-font-color-on-alt);
    margin-bottom: 0.5rem;
  }

  article {
    margin-top: 1rem;
    padding: 2rem 1rem;
    border-radius: inherit;
  }

  @media (pointer: fine) {
    article:hover {
      background-color: var(--color-card-hover);
      text-decoration: none;
    }
  }

  @media (pointer: coarse) {
    article:active {
      background-color: var(--color-card-hover);
      text-decoration: none;
    }
  }

  .rss-link :global(svg) {
    height: 4rem;
  }

  .rss-link {
    display: inline;
    border-radius: 0px;
  }
</style>
